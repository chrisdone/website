<!doctype html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>HaskellDB: A long tutorial</title>
  <style>body {
  max-width: 40em;
  margin: .5in auto;
  font-size: 18px;
  font-family: serif;
  margin-top: 5em;
  line-height: 1.5;
}
pre, code {
  font-size: 16px;
}
pre {
  margin-left: 1.5em;
  line-height: 1.2;
}
a {
  color: #1a6e8e
}
.menu a {
  margin-right: 1em;
}
h1,h2,h3,h4,h5,h6 {
  font-family: Helvetica;
}

h1 a,h2 a,h3 a,h4 a {
  text-decoration: none;
  color: inherit;
}

.post-1,.post-2{
  margin-bottom: 0.5em;
}

.author {
  display: none;
}

footer {
  margin-top: 1.5em;
  padding-top: 1.5em;
  border-top: 1px solid #ccc;
  margin-bottom: 2em
}

footer span {
  display: none;
}

img {
  max-width: 100%
}
pre.sourceCode span.st {
  color: #366354
}
pre.sourceCode span.kw {
  color: #397460
}
pre.sourceCode span.fu {
  color: #8f4e8b
}
pre.sourceCode span.ot {
  color: #2e659c
}
pre.sourceCode span.dt {
  color: #4F4371
}
pre.sourceCode span.co {
  color: #666
}
  </style>
  </head>
  <body>
    <div class="page-wrap">
      <h1>HaskellDB: A long tutorial</h1>
<p class="author">By <a href="https://chrisdone.com/">Chris Done</a></p>

<p>I’ve been using HaskellDB in production for about two years. I decided that I’d write a proper, up-to-date description, or tutorial, about what it is, how it works, what it can do, and my experience using it in projects.<sup><a href="#fn1" class="footnoteRef" id="fnref1">1</a></sup></p>
<h2 id="what-is-haskelldb">What is HaskellDB?</h2>
<p><a href="https://hackage.haskell.org/package/haskelldb">HaskellDB</a> is a database interface library for Haskell which features</p>
<ul>
<li>explicit declaration of schema of entities and fields,</li>
<li>an EDSL<sup><a href="#fn2" class="footnoteRef" id="fnref2">2</a></sup>—a <code>Query</code> monad—for making queries and statements based on using operations based on the relational algebra<sup><a href="#fn3" class="footnoteRef" id="fnref3">3</a></sup>,</li>
<li>a simple record system for dealing with entities and fields.</li>
</ul>
<p>It was originally developed for Hugs making use of the TRex, but was later made portable and is now happy in both Hugs and GHC<sup><a href="#fn4" class="footnoteRef" id="fnref4">4</a></sup>.</p>
<p>The <a href="https://rubyonrails.org/">Ruby on Rails project</a> recently adopted <a href="http://github.com/rails/arel">ARel, a library based on the same idea</a>.</p>
<h2 id="connecting">Connecting</h2>
<p>So to connect to a database with HaskellDB, you can use different backends. In this case, I’ll assume you’re using HDBC as a backend.</p>
<p>Pop them in a separate module:</p>
<pre><code>module Caturday.Model.Connect where

import Database.HaskellDB.HDBC
import Database.HaskellDB.Sql.PostgreSQL
import Database.HDBC.PostgreSQL (connectPostgreSQL)

withDB :: [(String,String)] -&gt; (Database -&gt; IO a) -&gt; IO a
withDB opts = hdbcConnect generator (connectPostgreSQL conninfo)
  where conninfo = unwords [ k ++ &quot;=&quot; ++ v | (k,v) &lt;- opts ]

opts = [(&quot;host&quot;,&quot;localhost&quot;)
       ,(&quot;user&quot;,&quot;your_username&quot;)
       ,(&quot;password&quot;,&quot;your_password&quot;)
       ,(&quot;dbname&quot;,&quot;your_db_name&quot;)]</code></pre>
<p>Usually you ought to combine this with configuration options.</p>
<h2 id="orm-approach">ORM approach</h2>
<h3 id="fields">Fields</h3>
<p>The approach for the object relational mapping is that one defines the column types and entity schemas up front. So, supposing our project is named Caturday, in a module named <code>Caturday.Model.Fields</code>,<sup><a href="#fn5" class="footnoteRef" id="fnref5">5</a></sup> using the <code>field</code> macro,<sup><a href="#fn6" class="footnoteRef" id="fnref6">6</a></sup> one declares fields. For example:</p>
<pre><code>{-# LANGUAGE TemplateHaskell #-}

-- | All database fields.

module Caturday.Model.Fields where

import Database.HaskellDB.TH

-- Keys.
field &quot;Id&quot; &quot;id&quot; &quot;id&quot; [t|Int|]

-- Data fields.
field &quot;Title&quot; &quot;title&quot; &quot;title&quot; [t|String|]</code></pre>
<p>This produces three things:</p>
<ul>
<li>A type called <code>Title</code>.</li>
<li>A field variable called <code>title</code>.</li>
<li>An instance of the field class which can be used to reference <code>title</code> in the database.</li>
</ul>
<p>In other words, a Haskell-level representation of the database field “title”.</p>
<h3 id="tables">Tables</h3>
<p>Then one defines the entities that use those fields in a module such as <code>Caturday.Model.Tables</code>, using the <code>table</code> macro<sup><a href="#fn7" class="footnoteRef" id="fnref7">7</a></sup>. For example:</p>
<pre><code>{-# LANGUAGE TemplateHaskell #-}

-- | Database tables and entities.

module Caturday.Model.Tables where

import Caturday.Model.Fields as Fields

import Database.HaskellDB.TH
import Prelude ()

-- | Content table.
table &quot;content&quot; &quot;content&quot;
  ['id
  ,'title
  ]</code></pre>
<p>The first argument is the Haskell-level value name for the table, and the second is the SQL-level name of the entity. To import <code>Fields as Fields</code> is a good idea.<sup><a href="#fn8" class="footnoteRef" id="fnref8">8</a></sup></p>
<h3 id="importing">Importing</h3>
<p>Once the model schema has been defined in these two modules, one ought to import them like so:</p>
<pre><code>import qualified Caturday.Model.Fields as F
import qualified Caturday.Model.Tables as T

import Database.HaskellDB
import Database.HaskellDB.HDBRec</code></pre>
<p>So that later we will refer to fields as <code>F.foo</code> and tables as <code>T.bar</code>.</p>
<h2 id="querying">Querying</h2>
<h3 id="selection">Selection</h3>
<p>Queries and statements in HaskellDB are composed with the <code>Query</code> monad. For example, simple selection works like this:</p>
<pre><code>simpleSelection = do
  table T.content</code></pre>
<p>We use the <code>table</code> function to select tables from our predefined set of tables. It returns a relation of some kind; i.e. tables or result of a sub-select or projection, etc.</p>
<p>To select more tables (i.e., <em>joining</em>) we just list more tables:</p>
<pre><code>simpleDoubleSelection = do
  table T.content
  table T.content</code></pre>
<p>We execute this query with <code>withDB</code>, for example:</p>
<pre><code>λ&gt; fmap (take 1) $ withDB opts $ \db -&gt; query db simpleSelection
[[(&quot;id&quot;,&quot;34750&quot;),(&quot;title&quot;,&quot;\&quot;Spanner Based Distributed Channel Assignment in Wireless Mesh Networks\&quot;&quot;)]]</code></pre>
<h3 id="projection">Projection</h3>
<p>For projection we use the <code>project</code> function defined in <code>Database.HaskellDB.Query</code>:</p>
<pre><code>simpleProjection = do
  content &lt;- table T.content
  project $ F.id &lt;&lt; content!F.id</code></pre>
<p>For each field we want to project, we specify a value for it using the <code>(&lt;&lt;)</code> function, defined in <code>Database.HaskellDB.Query</code>. To project more fields, we use the record constructing operator, <code>(#)</code>:</p>
<pre><code>simpleProjection2 = do
  content &lt;- table T.content
  project $ F.id    &lt;&lt; content!F.id
          # F.title &lt;&lt; content!F.title</code></pre>
<p>One can see this operator as akin to the tuple constructor <code>(,)</code> as in <code>(1,2)</code>.</p>
<p>We can also project our own Haskell-level values as SQL constants:</p>
<pre><code>simpleStringProjection = do
  content &lt;- table T.content
  project $ F.id    &lt;&lt; constant 123
          # F.title &lt;&lt; constant &quot;Hello, World!&quot;</code></pre>
<p>Personally in my use, I have renamed <code>constant</code> to <code>val</code>.<sup><a href="#fn9" class="footnoteRef" id="fnref9">9</a></sup> I just find this more convenient. I will use this henceforth.</p>
<pre><code>import Database.HaskellDB.Extra</code></pre>
<h3 id="restriction">Restriction</h3>
<p>We restrict results using the <code>restrict</code> function:</p>
<pre><code>simpleRestriction = do
  content &lt;- table T.content
  restrict $ content!F.title .==. val &quot;Coco Jambo&quot;
  return content</code></pre>
<p>The restrict function takes an SQL boolean expression:</p>
<pre><code>λ&gt; :i restrict
restrict :: Expr Bool -&gt; Query ()
        -- Defined in Database.HaskellDB.Query</code></pre>
<p>For boolean expressions there are a bunch of logical operators that commonly appear in SQL:</p>
<pre><code>-- | Equality comparison on Exprs, = in SQL.
(.==.) :: Eq a =&gt; Expr a -&gt; Expr a -&gt; Expr Bool

-- | Inequality on Exprs, &lt;&gt; in SQL.
(.&lt;&gt;.) :: Eq a =&gt; Expr a -&gt; Expr a -&gt; Expr Bool
(.&lt;.) :: Ord a =&gt; Expr a -&gt; Expr a -&gt; Expr Bool
(.&gt;=.) :: Ord a =&gt; Expr a -&gt; Expr a -&gt; Expr Bool

-- | \&quot;Logical and\&quot; on 'Expr', AND in SQL.
(.&amp;&amp;.):: Expr Bool -&gt; Expr Bool -&gt; Expr Bool

-- | \&quot;Logical or\&quot; on 'Expr'. OR in SQL.
(.||.) :: Expr Bool -&gt; Expr Bool -&gt; Expr Bool</code></pre>
<p>Note that the convention is for operators in HaskellDB to be surrounded by periods. For more see the Operators section of Database.HaskellDB.Query.</p>
<h3 id="raw-sql-output">Raw SQL Output</h3>
<p>To get a concrete feeling of what SQL this code will produce, let’s observe the output. To do that, we can use <code>ppSqlUnOpt</code>:</p>
<pre><code>λ&gt; :i ppSqlUnOpt
ppSqlUnOpt :: Query (Rel r) -&gt; Text.PrettyPrint.HughesPJ.Doc
        -- Defined in Database.HaskellDB.PrintQuery</code></pre>
<p>The simple selection:</p>
<pre><code>λ&gt; ppSqlUnOpt simpleSelection
SELECT id,
       title
FROM content as T1</code></pre>
<p>The projection example:</p>
<pre><code>λ&gt; ppSqlUnOpt simpleProjection
SELECT id as id1,
       title as title1
FROM content as T1</code></pre>
<p>The constant value example:</p>
<pre><code>λ&gt; ppSqlUnOpt simpleStringProjection
SELECT 123 as id,
       'Hello, World!' as title,
       id1,
       title1
FROM (SELECT id as id1,
             title as title1
      FROM content as T1) as T1</code></pre>
<p>The code is clear to read and not that surprising.</p>
<h3 id="insertion-delete-update">Insertion, delete, update</h3>
<p>Insertion uses the <code>insert</code> function. Similar to the <code>query</code> function, it takes a connection value. Pretty self-explanatory:</p>
<pre><code>simpleInsert conn = do
  insert conn
         T.content
         ( F.id    &lt;&lt; val 123
         # F.title &lt;&lt; val &quot;What is Love?&quot;)</code></pre>
<p>The delete function takes a restriction clause for the row to delete, with the ability to inspect the row for the condition.</p>
<pre><code>simpleDelete conn = do
  delete conn
         T.content
         (\content -&gt; content!F.title .==. val &quot;Coco Jambo&quot;)</code></pre>
<p>Updating is the same as insert, but we provide a function for the update:</p>
<pre><code>simpleUpdate conn = do
  update conn
         T.content
         (\content -&gt; content!F.title .==. val &quot;Coco Jambo&quot;)
         (\content -&gt; F.title &lt;&lt; val &quot;What is Love?&quot;)</code></pre>
<h2 id="speed-and-optimisation">Speed and optimisation</h2>
<p>But the subquery is useless in this example, so clearly the optimizer isn’t magic.</p>
<pre><code>λ&gt; ppSqlUnOpt simpleDoubleSelection
SELECT id2 as id,
       title2 as title
FROM (SELECT id as id2,
             title as title2
      FROM content as T1) as T1,
     (SELECT id as id1,
             title as title1
      FROM content as T1) as T2</code></pre>
<p>In fact, subqueries are created in all cases.</p>
<p>For normal query optimizers, e.g. PostgreSQL, the subquery is lifted as to be equivalent to there being one query. I am not sure about MySQL; it may have trouble when joins are involved. Don’t expect good performance from HaskellDB if you’re using MySQL.<sup><a href="#fn10" class="footnoteRef" id="fnref10">10</a></sup></p>
<p>For example, PostgreSQL sees such use of sub-query as equivalent to direct join:</p>
<pre><code>=&gt; explain SELECT id2 as id,
           title2 as title
    FROM (SELECT id as id2,
                 title as title2
          FROM content as T1) as T1,
         (SELECT id as id1,
                 title as title1
          FROM content as T1) as T2;
                          QUERY PLAN
------------------------------------------------------------------
 Nested Loop  (cost=1578.48..330231.64 rows=16353936 width=77)
 -&gt;Seq Scan on content t1 (cost=0.00..1574.44 rows=4044 width=77)
 -&gt;Materialize (cost=1578.48..1618.92 rows=4044 width=0)
   -&gt;Seq Scan on content t1 (cost=0.00..1574.44 rows=4044 width=0)
(4 rows)

=&gt; explain SELECT T1.id as id,
           T1.title as title
    FROM content as T1,
         content as T2;
                          QUERY PLAN
-------------------------------------------------------------------
 Nested Loop  (cost=1578.48..330231.64 rows=16353936 width=77)
 -&gt;Seq Scan on content t1 (cost=0.00..1574.44 rows=4044 width=77)
 -&gt;Materialize (cost=1578.48..1618.92 rows=4044 width=0)
   -&gt;Seq Scan on content t1 (cost=0.00..1574.44 rows=4044 width=0)
(4 rows)

=&gt;</code></pre>
<p>I’m not joining on any indexes so it’s a sequence scan. For people not used to PostgreSQL output, this basically means it will do a cartesian product in both versions.</p>
<h2 id="maintenance">Maintenance</h2>
<p>The great part about HaskellDB is that it is in first-class Haskell land. Fields and tables have a statically enforced membership and field-type schema.</p>
<p>The obvious use case is that it avoids making mistakes in naming and ending up with the wrong field type, or using a field that doesn’t exist in a given table.</p>
<p>The fact that all fields are defined up front with the right type means that one really has to think about how meaningful a type is and how one will use it. For example:</p>
<pre><code>field &quot;Abstract&quot; &quot;abstract&quot; &quot;abstract&quot; [t|Maybe String|]</code></pre>
<p>This is how to encode a database text field that is nullable. When one is encoding their database schema into the Haskell type system, one finds that it really needs to be thought of properly of what types are there in the database, particularly nullability.</p>
<p>In my day to day work, I have to work with database schemas that aren’t mine, I have to interface with them. Due to my use of HaskellDB, I have a lot of correctness questions about these schemas I’m working with to the authors, if they are available for consultation.</p>
<p>Often it comes up, that I ask “why is this field nullable?” and the question often comes back, “I don’t know.” As the PostgreSQL documentation says, in most database designs the majority of columns should be marked not null.<sup><a href="#fn11" class="footnoteRef" id="fnref11">11</a></sup></p>
<p>Note that in Haskell nullability is not implicit. No values can be null. But you can have choice between a value or not a value, as in <code>Maybe</code>:</p>
<pre><code>data Maybe a = Just a | Nothing</code></pre>
<p>And so if we use the abstract field, as mentioned, and use it as a string, it’s not a string, it’s a <code>Maybe String</code>, so we get a compile error such as:</p>
<pre><code>Mismatch: Demo.hs:23:32: “Maybe String” ≠ “String”</code></pre>
<p>Another nice property is that fields named in your codebase, and their names in the database, are entirely separate and configurable. Just because Joe Master Designer chose certain names in his schema, that doesn’t mean that you have to conform to those names. Maybe they call it <code>thetitle</code>, and you just want <code>title</code>:</p>
<pre><code>field &quot;Title&quot; &quot;title&quot; &quot;thetitle&quot; [t|String|]</code></pre>
<p>Another fact is changes to the schema underneath: if someone (you or someone else) changes the type or availability of a field or table in the schema, all you need do is make the necessary change in the field module or table module, and the compiler will tell you immediately which modules need updating with the new invariants.</p>
<p>Suppose we change the type of the field title to <code>Int</code> (for example), when we recompile our examples above, we get:</p>
<pre><code>Mismatch: Demo.hs:23:32: “Int” ≠ “String”
Mismatch: Demo.hs:25:0: “String” ≠ “Int”</code></pre>
<p>So the following two functions are now inconsistent:</p>
<pre><code>simpleStringProjection = do
  content &lt;- table T.content
  project $ F.id    &lt;&lt; constant 123
          # F.title &lt;&lt; constant &quot;Hello, World!&quot;

simpleRestriction = do
  content &lt;- table T.content
  restrict $ content!F.title .==. val &quot;Coco Jambo&quot;
  return content</code></pre>
<p>In a codebase of 10K+ lines, this starts to become very compelling.</p>
<p>I believe LINQ in C# et al provide similar static assurances.</p>
<h2 id="extension">Extension</h2>
<h3 id="pagination-and-composing-queries">Pagination and composing queries</h3>
<p>Because the query DSL is a monad (as plenty of Haskell DSLs are), it is really nicely composable. This means it’s trivial to split up queries into discrete parts that have meaningful and generic purposes.</p>
<p>For example, to implement pagination, which is essentially the simple problem of an offset and a count. I implemented this in <code>HaskellDB.Database.Pagination</code>.<sup><a href="#fn12" class="footnoteRef" id="fnref12">12</a></sup></p>
<p>Thus the following implementation is possible. Suppose we write some functions to search the articles by title in the database, but paginated. Two things we need for this are:</p>
<ul>
<li>The count of total articles filtered by the search query, <code>q</code>.</li>
<li>The paginated articles filtered by the search query.</li>
</ul>
<p>First we define a query that does the search and restriction:</p>
<pre><code>getContent q = do
  article &lt;- table T.content
  restrict $ article!F.title .==. val q
  return article</code></pre>
<p>In the fields module we need another field:</p>
<pre><code>field &quot;Count&quot; &quot;count&quot; &quot;count&quot; [t|Int|]</code></pre>
<p>Then we write the function that uses this query, and projects the count:</p>
<pre><code>getArticlesCount conn q = fmap (sum . map (!F.count)) $ query conn $ do
  article &lt;- getContent q
  project $ F.count &lt;&lt; count (article!F.id)</code></pre>
<p>Then we can write a function to get the articles and then paginate.</p>
<pre><code>getArticles conn pn q = fmap (map (!F.title)) $ query conn $ do
  article &lt;- getContent q
  paginate pn
  return article</code></pre>
<p>Very, very easy to compose.</p>
<h3 id="functions-and-operators">Functions and operators</h3>
<p>Sometimes you want to define more SQL functions and operators, which is <a href="https://hpaste.org/53608">a use case I had for PostgreSQL</a> as <code>Database.HaskellDB.PostgreSQL</code>.</p>
<p>The function to use for extending with new functions is <code>func</code>.</p>
<pre><code>λ&gt; :i func
func :: (Args a) =&gt; String -&gt; a
        -- Defined in Database.HaskellDB.Query</code></pre>
<p><code>Args</code> is implemented as a way to have arbitrary number of serializable parameters, in the same way <code>Text.Printf.printf</code> works.</p>
<p>For example, <a href="https://www.postgresql.org/docs/8.1/static/functions-datetime.html">date_part</a> in PostgreSQL:</p>
<pre><code>-- | Get part of a date.
date_part :: Expr String -&gt; Expr CalendarTime -&gt; Expr Integer
date_part = func &quot;date_part&quot;</code></pre>
<p>Or maybe we want to use full text search support from PostgreSQL. Let’s add a field to represent the <code>ts_vector</code>, and define a table with the searchable stuff:</p>
<pre><code>-- | Search fields.
field &quot;Textsearchable&quot; &quot;textsearchable&quot; &quot;textsearchable_index_col&quot;
      [t|TSVector|]

-- | Content table with searchable full text field.
table &quot;contentSearchable&quot; &quot;content&quot;
  ['id
  ,'title
  ,'textsearchable
  ]</code></pre>
<p>Now we can redefine <code>getContent</code> which matches on the <code>ts_vector</code>:</p>
<pre><code>getContentFullText q = do
  article &lt;- table T.contentSearchable
  restrict $ article!F.textsearchable .@@. (to_tsquery (val q))
  order [descExpr $ ts_rank_cd (article!F.textsearchable)
                               (to_tsquery (val q))]
  return article</code></pre>
<p>This can be achieved by a phantom type (i.e. an uninhabitable type at the value-level):</p>
<pre><code>-- | A text-search vector.
data TSVector

-- | Convert a string to a textsearch vector.
to_tsvector :: Expr String -&gt; Expr TSVector
to_tsvector = func &quot;to_tsvector&quot;</code></pre>
<p>And the function can be used, at the SQL-level, because the vector is constructed at the SQL-level, not the Haskell level. That’s quite nice.</p>
<p>Likewise, <code>descExpr</code> was written by me from the Database.HaskellDB.Extra module:</p>
<pre><code>-- | Order the query by an arbitrary expression.
descExpr :: Expr a -&gt; OrderExpr
descExpr e = OrderExpr OpDesc expr where
  Expr expr = e</code></pre>
<p>One just needs access to the internal tree and a new combinator can be constructed.</p>
<h2 id="enums">Enums</h2>
<p>It’s also possible to use enum types with HaskellDB that map from DB-level enums and Haskell enums.</p>
<p>Suppose we define an Enums module, with an enum type <code>ArticleType</code>:</p>
<pre><code>module Caturday.Types.Enums where

import Data.Enum.Print
import Database.HaskellDB.Get
import Database.HaskellDB.PrimQuery
import Database.HaskellDB.Query

data ArticleType
  = ResearchArticle
  | Editorial
  deriving (Show,Enum,Read,Eq)</code></pre>
<p>In order to get values of this type from the database with HaskellDB, we need to implement the <code>GetValue</code> and the <code>ShowConstant</code> classes:</p>
<pre><code>instance GetValue ArticleType where
  getValue = getValueWith readEnum &quot;ArticleType&quot;

instance ShowConstant ArticleType where
  showConstant = StringLit . showEnum</code></pre>
<p>This uses two <em>other</em> modules (I know, I’m referencing a lot of modules I’ve written, sorry), <a href="https://hpaste.org/53612">Data.Enum.Print</a>, a simple enum serialization module, and <a href="http://hpaste.org/53614">Database.HaskellDB.Get</a>, which provides the <code>getValueWith</code> function.</p>
<p>Now we can define the fields that use this type in our Fields module:</p>
<pre><code>import qualified Caturday.Types.Enums as Types (ArticleType)

-- | Enum types.
field &quot;ArticleType&quot; &quot;articleType&quot; &quot;type&quot; [t|Types.ArticleType|]</code></pre>
<p>and redefine the content table’s schema:</p>
<pre><code>-- | Content table.
table &quot;content&quot; content&quot;
  ['id
  ,'title
  ,'articleType
  ]</code></pre>
<p>So now, our Demo module doesn’t compile, so we update:</p>
<pre><code>import Caturday.Types.Enums

simpleInsert conn = do
  insert conn
         T.content
         ( F.id          &lt;&lt; val 123
         # F.title       &lt;&lt; val &quot;What is Love?&quot;
         # F.articleType &lt;&lt; val Editorial)</code></pre>
<p>And we can also use the enum for restriction as well as retrieval:</p>
<pre><code>restrictOnArticleType conn = query conn $ do
  content &lt;- table T.content
  restrict $ content!F.articleType .==. val Editorial
  return content

λ&gt; fmap (take 1) $ withDB opts $ \db -&gt; restrictOnArticleType db
[[(&quot;id&quot;,&quot;82&quot;)
,(&quot;title&quot;,&quot;\&quot;Welcome message from the Editor-in-Chief\&quot;&quot;)
,(&quot;type&quot;,&quot;Editorial&quot;)]]</code></pre>
<h2 id="stability">Stability</h2>
<p>The problem with HaskellDB is that the implementation can be unstable. I found that I had to patch the PostgreSQL library to handle simple stupid things like fields named “user” or “order”, by making sure to quote all fields.</p>
<p>I also had to open up some of the internal parts of the API so that I could extend it further, such as for the operator <code>(.@@.)</code> defined above. I’ll push these fixes and extensions to fork repos at some point.</p>
<h2 id="reading-error-messages">Reading error messages</h2>
<p>HaskellDB gets a lot of stick for hard to read error messages. This is true when you get things badly wrong.</p>
<p>In the general case the errors are quite straight forward.</p>
<p>For example, if I try to use a field which doesn’t exist in the table, like this:</p>
<pre><code>simpleRestriction = do
  content &lt;- table T.content
  restrict $ content!F.count .==. val 1
  return content</code></pre>
<p>Then the compile error looks like this:</p>
<pre><code>Error: Demo.hs:39:13: No instance for (HasField F.Count RecNil)
      arising from a use of `!' at Demo.hs:39:13-27
    Possible fix:
      add an instance declaration for (HasField F.Count RecNil)
    In the first argument of `(.==.)', namely `content ! F.count'
    In the second argument of `($)', namely
        `content ! F.count .==. val 1'
    In a stmt of a 'do' expression:
          restrict $ content ! F.count .==. val 1</code></pre>
<p>Which is a very useful error message. <code>content</code> does not has field <code>count</code>.</p>
<p>For getting the wrong type, it merely shows “couldn’t match type A against type B,” straight-forward.</p>
<p>The cases where compile errors blow up are, for example, if I wrote this:</p>
<pre><code>simpleRestriction = do
  content &lt;- table T.content
  restrict $ content!content .==. val &quot;Coco Jambo&quot;
  return content

then the error is:

Error: Demo.hs:39:13:
  No instance for
    (Select
      (Rel
        (RecCons F.Id (Expr Int)
                (RecCons F.Title (Expr String) RecNil)))
      (Rel
        (RecCons F.Id (Expr Int)
                (RecCons F.Title (Expr String) RecNil)))
      (Expr [Char]))
      arising from a use of `!'
                   at Demo.hs:39:13-27
    Possible fix:
      add an instance declaration for […]
    In the first argument of `(.==.)', namely `content ! content'
    In the second argument of `($)', namely
        `content ! content .==. val &quot;Coco Jambo&quot;'
    In a stmt of a 'do' expression:
          restrict $ content ! content .==. val &quot;Coco Jambo&quot;</code></pre>
<p>The error actually makes sense if you understand the API well enough, but otherwise it can be very confusing and worrying. Don’t worry about it, you didn’t break something complicated, you just made a typo somewhere. It shows the offending expression; you realised you tried to use a table as a field, and you correct.</p>
<h2 id="files">Files</h2>
<p>The complete files for this demo including patched libraries are <a href="https://github.com/chrisdone/haskelldb-demo">here in Github flavour.</a></p>
<div class="footnotes">
<hr></hr>
<ol>
<li id="fn1"><p>Afterwards it would seem like a good idea to get a proper comprehensive tutorial on the HaskellWiki, or much better yet, embed a tutorial in the Haddock documentation for HaskellDB. At the moment the haddock docs are literally just an API listing, with no elaborative explanation or examples. Writing in Haddock mark-up is quite a painful, boring experience. Regardless, I believe the haddock docs of a project should (most of the time) be sufficient to explain its use, linking to external papers and blog posts and whatnot is annoyingly terse and quickly becomes out of date.<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>Embedded domain-specific language. A common notion in Haskell and Lisp languages, though implemented differently in each.<a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>See <a href="https://hackage.haskell.org/package/haskelldb">package description for HaskellDB</a>.<a href="#fnref3">↩</a></p></li>
<li id="fn4"><p>See the <a href="https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.136.3828&amp;rep=rep1&amp;type=pdf">“HaskellDB Improved” paper.</a><a href="#fnref4">↩</a></p></li>
<li id="fn5"><p>This is the convention I have chosen to use. It makes good sense and can be very helpful for all fields used in the project to be defined on a per-project basis, rather than per-entity, and of the same type.<a href="#fnref5">↩</a></p></li>
<li id="fn6"><p>A macro that you can get from <a href="https://hpaste.org/53595">Database.HaskellDB.TH</a>, which I have yet to put into a library or get added to HaskellDB mainline. I don’t care to debate API decisions with the HaskellDB maintainers right now.<a href="#fnref6">↩</a></p></li>
<li id="fn7"><p>A macro that you can get from <a href="https://hpaste.org/53595">Database.HaskellDB.TH</a>, which I have yet to put into a library or get added to HaskellDB mainline. I don’t care to debate API decisions with the HaskellDB maintainers right now.<a href="#fnref7">↩</a></p></li>
<li id="fn8"><p>When table names conflict with field names—and eventually it happens—this is useful to have. Alternatively <code>as F</code> also makes sense, to be consistent.<a href="#fnref8">↩</a></p></li>
<li id="fn9"><p>I have defined a few extra functions for HaskellDB in <a href="https://hpaste.org/53599">Database.HaskellDB.Extra</a>.<a href="#fnref9">↩</a></p></li>
<li id="fn10"><p><a href="https://pseudofish.com/blog/2008/05/18/haskelldb-performance/">Geoff Wilson on HaskellDB performance.</a><a href="#fnref10">↩</a></p></li>
<li id="fn11"><p><a href="https://www.postgresql.org/docs/8.3/static/ddl-constraints.html">PostgreSQL manual on constraints.</a><a href="#fnref11">↩</a></p></li>
<li id="fn12"><p><a href="https://hpaste.org/53619">Another simple module</a> and <a href="http://hpaste.org/53607">another</a> that would be cool to put in a package, but for now remains in my utility box.<a href="#fnref12">↩</a></p></li>
</ol>
</div>

<footer>
  © 2011-11-06 Chris Done &lt;chrisdone@gmail.com&gt;
<span style="float:right"><a href="../rss.xml">RSS</a></span>
</footer>

    </div>

  </body>
</html>
