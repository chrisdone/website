<!doctype html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>The constraint trick for instances</title>
  <style>body {
  max-width: 40em;
  margin: .5in auto;
  font-size: 18px;
  font-family: serif;
  margin-top: 5em;
  line-height: 1.5;
}
pre, code {
  font-size: 16px;
}
pre {
  margin-left: 1.5em;
  line-height: 1.2;
}
a {
  color: #1a6e8e
}
.menu a {
  margin-right: 1em;
}
h1,h2,h3,h4,h5,h6 {
  font-family: Helvetica;
}

h1 a,h2 a,h3 a,h4 a {
  text-decoration: none;
  color: inherit;
}

.post-1,.post-2{
  margin-bottom: 0.5em;
}

.author {
  display: none;
}

footer {
  margin-top: 1.5em;
  padding-top: 1.5em;
  border-top: 1px solid #ccc;
  margin-bottom: 2em
}

footer span {
  display: none;
}

img {
  max-width: 100%
}
pre.sourceCode span.st {
  color: #366354
}
pre.sourceCode span.kw {
  color: #397460
}
pre.sourceCode span.fu {
  color: #8f4e8b
}
pre.sourceCode span.ot {
  color: #2e659c
}
pre.sourceCode span.dt {
  color: #4F4371
}
pre.sourceCode span.co {
  color: #666
}
  </style>
  </head>
  <body>
    <div class="page-wrap">
      <h1>The constraint trick for instances</h1>
<p class="author">By <a href="https://chrisdone.com/">Chris Done</a></p>

<p>Ever seen this in a library,</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">instance</span> (var <span class="fu">~</span> <span class="dt">AType</span>) <span class="ot">=&gt;</span> <span class="dt">ClassName</span> (<span class="dt">SomeType</span> var)</code></pre>
<p>and thought, “Shenanigans! Why not just have this?”</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">ClassName</span> (<span class="dt">SomeType</span> <span class="dt">AType</span>)</code></pre>
<p>Me too!</p>
<p>I only learned of this solution relatively recently, and I know experienced Haskellers who also only understood this recently or still don’t. Hence this quick write up. Here’s the thought process.</p>
<p>We’re writing a trivial pretty printer and we’re using <code>Writer</code>. We write things like:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ&gt; execWriter (<span class="kw">do</span> tell <span class="st">&quot;hello&quot;</span>; tell <span class="st">&quot;world&quot;</span><span class="ot"> ::</span> <span class="dt">Writer</span> <span class="dt">String</span> ())
<span class="st">&quot;helloworld&quot;</span></code></pre>
<p>Quality. But writing <code>tell</code> every time is so boring! How about we use the <code>IsString</code> class so that we can just write the string literals like this?</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">do</span> <span class="st">&quot;hello&quot;</span>; <span class="st">&quot;world&quot;</span></code></pre>
<p>Let’s write the <code>IsString</code> instance:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">IsString</span> (<span class="dt">Writer</span> <span class="dt">String</span> a) <span class="kw">where</span>
  fromString <span class="fu">=</span> tell</code></pre>
<p>What do you say, GHC?</p>
<blockquote>
<p>Couldn’t match type ‘a’ with ‘()’</p>
<p>‘a’ is a rigid type variable bound by the instance declaration</p>
</blockquote>
<p>Oh. Good point. The type of our <code>tell</code> call results in <code>Writer String ()</code>. A small set back. Fine, let’s change the instance declaration to just be <code>()</code>:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">IsString</span> (<span class="dt">Writer</span> <span class="dt">String</span> ()) <span class="kw">where</span>
  fromString <span class="fu">=</span> tell</code></pre>
<p>GHC loves it!</p>
<p>Let’s try using it:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ&gt; execWriter (<span class="kw">do</span> <span class="st">&quot;hello&quot;</span>; <span class="st">&quot;world&quot;</span><span class="ot"> ::</span> <span class="dt">Writer</span> <span class="dt">String</span> ())
<span class="fu">&lt;</span>interactive<span class="fu">&gt;:</span><span class="dv">42</span><span class="fu">:</span><span class="dv">16</span><span class="fu">:</span>
    <span class="dt">No</span> <span class="kw">instance</span> for (<span class="dt">IsString</span> (<span class="dt">WriterT</span> <span class="dt">String</span> <span class="dt">Identity</span> a))
      arising from the literal ‘<span class="st">&quot;hello&quot;</span>’
    <span class="dt">The</span> <span class="kw">type</span> variable ‘a’ is ambiguous</code></pre>
<p>This displeases me. But it adds up given the type of <code>(&gt;&gt;)</code>:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">(&gt;&gt;) ::</span> <span class="dt">Monad</span> m <span class="ot">=&gt;</span> m a <span class="ot">-&gt;</span> m b <span class="ot">-&gt;</span> m b</code></pre>
<p>In <code>_ &gt;&gt; return () :: Writer String ()</code>, the type of <code>_</code> is <code>Writer String a</code>, so we really need an <code>IsString</code> instance that matches that. But we <em>already</em> tried that. Oh, woe<em>!</em></p>
<p>Some people reading this will be nodding in recognition of this same problem they had while writing that perfect API that <em>just</em> won’t work because of this niggling issue.</p>
<p>Here comes the trick.<sup><a href="#fn1" class="footnoteRef" id="fnref1">1</a></sup> So let’s go back to a basic instance:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">MyTuple</span> a b <span class="fu">=</span> <span class="dt">MyTuple</span> a b
<span class="kw">instance</span> <span class="dt">Show</span> (<span class="dt">MyTuple</span> a b) <span class="kw">where</span>
  show _ <span class="fu">=</span> <span class="st">&quot;MyTuple &lt;some value&gt; &lt;some value&gt;&quot;</span></code></pre>
<p>Suppose I replace this instance with a new instance that has constraints:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">instance</span> (<span class="dt">Show</span> a,<span class="dt">Show</span> b) <span class="ot">=&gt;</span> <span class="dt">Show</span> (<span class="dt">MyTuple</span> a b) <span class="kw">where</span>
  show (<span class="dt">MyTuple</span> a b) <span class="fu">=</span> <span class="st">&quot;MyTuple &quot;</span> <span class="fu">++</span> show a <span class="fu">++</span> <span class="st">&quot; &quot;</span> <span class="fu">++</span> show b</code></pre>
<p>Question: Does that change whether GHC decides to pick this new version of instance over others that may be available, compared to the one above? Have a think.</p>
<p>The answer is: nein! The constraints of an instance don’t have anything to do with deciding whether an instance is picked from the list of instances available. Constraints only apply <em>after GHC has already decided it’s going with this instance</em>.</p>
<p>So, cognizant of this obvious-after-the-fact property, let’s use the equality constraint that was introduced with GADTs and type families (enabling either brings in <code>~</code>):</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">instance</span> a <span class="fu">~</span> () <span class="ot">=&gt;</span> <span class="dt">IsString</span> (<span class="dt">Writer</span> <span class="dt">String</span> a) <span class="kw">where</span>
  fromString <span class="fu">=</span> tell</code></pre>
<p>Let’s try it:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ&gt; execWriter (<span class="kw">do</span> <span class="st">&quot;hello&quot;</span> ; <span class="st">&quot;world&quot;</span><span class="ot"> ::</span> <span class="dt">Writer</span> <span class="dt">String</span> ())
<span class="st">&quot;helloworld&quot;</span></code></pre>
<img src="https://i.imgur.com/v4j4izS.gif">
<p>This instance is picked by GHC, as we hoped, because of the <code>a</code>. The instance method also type checks, because the constraint applies when type checking the instance methods, just like if you write a regular declaration like:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">foo ::</span> (a <span class="fu">~</span> ()) <span class="ot">=&gt;</span> a
foo <span class="fu">=</span> ()</code></pre>
<p>That’s it! This crops up in a number of my own libraries and knowing this really helped me. Here is <a href="https://github.com/chrisdone/lucid/blob/16c4b09ee90e2e61fef0e1070c0c3ebaf6246da1/src/Lucid/Base.hs#L81">a real example from my <code>lucid</code> library</a>:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">instance</span> (a <span class="fu">~</span> (),<span class="dt">Monad</span> m) <span class="ot">=&gt;</span> <span class="dt">Monoid</span> (<span class="dt">HtmlT</span> m a) <span class="kw">where</span>
  mempty  <span class="fu">=</span> return mempty
  mappend <span class="fu">=</span> liftM2 mappend</code></pre>
<p>Hope this was helpful!</p>
<div class="footnotes">
<hr></hr>
<ol>
<li id="fn1"><p>Actually, it’s a natural consequence to grokking how instance resolution works (but calling it a “trick” makes for a catchy title).<a href="#fnref1">↩</a></p></li>
</ol>
</div>

<footer>
  © 2015-06-19 Chris Done &lt;chrisdone@gmail.com&gt;
<span style="float:right"><a href="../rss.xml">RSS</a></span>
</footer>

    </div>

  </body>
</html>
