-- Dependencies:
--
-- hell-2024-02-07
-- pandoc-3.1.11.1

-- Main entry point just generates the complete blog every time.
--
--
main = do
  Text.putStrLn "Generating ..."
  Main.generate

-- The posts are listed under ./posts in this format:
--
-- dijkstra-haskell-java.markdown
-- reasoning-violently.md
-- god-mode.markdown
-- emacs-mail.markdown
--
-- .md or .markdown files, the extension doesn't matter.
--
generate = do
  posts <- Main.generatePosts
  Main.generateArchive posts
  Text.putStrLn ""

-- Write out posts/$post/index.html per $post.
--
generatePosts = do
  posts <- Directory.listDirectory "posts"
  Text.putStrLn (Text.concat ["Generating ", Show.show (List.length posts), " posts ..."])
  Async.pooledForConcurrently posts \post -> do
    contents <- Text.readFile (Text.concat ["posts/", post])
    Maybe.maybe
      (Error.error "Couldn't parse the article!")
      (\triple -> do
        Main.render post
        Monad.return triple)
      (Main.parse contents)

-- Generate the /posts/ page.
--
generateArchive = \posts ->
  Text.putStrLn (Text.concat ["Generating archive ..."])


-- Contents of an article looks like this:
--
-- ---
-- date: 2011-04-10
-- title: ‘amb’ operator and the list monad
-- description: ‘amb’ operator and the list monad
-- author: Chris Done
-- tags: haskell, designs
-- ---
--
-- We're only interested in the date and the title. The rest is
-- redundant.
--
parse = \article -> do
  sansPrefix <- Text.stripPrefix "---" article
  let (preamble, content) = Text.breakOn "---" sansPrefix
  let lines = Text.splitOn "\n" preamble
  let pairs = List.map (\line -> do let (key, value) = Text.breakOn ":" line
                                    (key, Text.strip (Text.drop 1 value)))
                       lines
  date <- List.lookup "date" pairs
  title <- List.lookup "title" pairs
  Monad.return (date, title, content)

-- A post consists of a date, title and markdown.
--
-- Rendering them is easy, just run pandoc and apply an HTML template.
render = \post -> do
  let targetDir =
        Text.concat ["webroot/posts/", Text.replace ".md" "" (Text.replace ".markdown" "" post)]
  let targetFile = Text.concat [targetDir, "/index.html"]
  (out, err) <- Text.readProcess_ (Process.proc "pandoc" ["--standalone","--template","templates/post.html",Text.concat ["posts/", post]])
  Directory.createDirectoryIfMissing Bool.True targetDir
  Text.writeFile targetFile out
